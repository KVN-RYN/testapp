// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 54gWnNeJTpdtwf46XhFcJL
// Component: GHmytt8Dki
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: yRxH7M8asot/component
import { useScreenVariants as useScreenVariantsvrTwc8W1T6YPe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vrTWC8W1T6yPe/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_waiterapp.module.css"; // plasmic-import: 54gWnNeJTpdtwf46XhFcJL/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: GHmytt8Dki/css

export const PlasmicLogin__VariantProps = new Array();

export const PlasmicLogin__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvrTwc8W1T6YPe()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone11ProMax2"}
            data-plasmic-override={overrides.iPhone11ProMax2}
            className={classNames(projectcss.all, sty.iPhone11ProMax2)}
          >
            <div
              data-plasmic-name={"rectangle3"}
              data-plasmic-override={overrides.rectangle3}
              className={classNames(projectcss.all, sty.rectangle3)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f5A3R
              )}
            >
              {"Login"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gcPpD
              )}
            >
              {"Sign-up"}
            </div>
            <div
              data-plasmic-name={"rectangle1"}
              data-plasmic-override={overrides.rectangle1}
              className={classNames(projectcss.all, sty.rectangle1)}
            />

            <div
              data-plasmic-name={"group1"}
              data-plasmic-override={overrides.group1}
              className={classNames(projectcss.all, sty.group1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__drq9A
                )}
              >
                {"Email address"}
              </div>
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"Enter Email"}
                value={
                  p.generateStateValueProp($state, ["textInput", "value"]) ?? ""
                }
              />
            </div>
            <div
              data-plasmic-name={"group2"}
              data-plasmic-override={overrides.group2}
              className={classNames(projectcss.all, sty.group2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qB88
                )}
              >
                {"Password"}
              </div>
              <TextInput
                data-plasmic-name={"textInput2"}
                data-plasmic-override={overrides.textInput2}
                className={classNames("__wab_instance", sty.textInput2)}
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["textInput2", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"Password"}
                value={
                  p.generateStateValueProp($state, ["textInput2", "value"]) ??
                  ""
                }
              />
            </div>
            <button
              data-plasmic-name={"rectangle2"}
              data-plasmic-override={overrides.rectangle2}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.rectangle2
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToMain"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "IjWKyzWAJ",
                            componentUuid: "GHmytt8Dki",
                            argName: "destination"
                          },
                          () => `/new-page`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "IjWKyzWAJ",
                          componentUuid: "GHmytt8Dki"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToMain"] === "object" &&
                  typeof $steps["goToMain"].then === "function"
                ) {
                  $steps["goToMain"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "IjWKyzWAJ",
                      componentUuid: "GHmytt8Dki"
                    },
                    $steps["goToMain"]
                  );
                }
                $steps["updateTextInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "ppDAFzwQ7",
                            componentUuid: "GHmytt8Dki",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["textInput", "value"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "ppDAFzwQ7",
                            componentUuid: "GHmytt8Dki",
                            argName: "operation"
                          },
                          () => 0
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "ppDAFzwQ7",
                          componentUuid: "GHmytt8Dki"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateTextInputValue"] === "object" &&
                  typeof $steps["updateTextInputValue"].then === "function"
                ) {
                  $steps["updateTextInputValue"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "ppDAFzwQ7",
                      componentUuid: "GHmytt8Dki"
                    },
                    $steps["updateTextInputValue"]
                  );
                }
              }}
              ref={ref => {
                $refs["rectangle2"] = ref;
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vP8GW
              )}
            >
              {"Login"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jmRlD
              )}
            >
              {"Forgot passcode?"}
            </div>
            <div
              data-plasmic-name={"image12"}
              data-plasmic-override={overrides.image12}
              className={classNames(projectcss.all, sty.image12)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone11ProMax2",
    "rectangle3",
    "rectangle1",
    "group1",
    "textInput",
    "group2",
    "textInput2",
    "rectangle2",
    "image12"
  ],

  iPhone11ProMax2: [
    "iPhone11ProMax2",
    "rectangle3",
    "rectangle1",
    "group1",
    "textInput",
    "group2",
    "textInput2",
    "rectangle2",
    "image12"
  ],

  rectangle3: ["rectangle3"],
  rectangle1: ["rectangle1"],
  group1: ["group1", "textInput"],
  textInput: ["textInput"],
  group2: ["group2", "textInput2"],
  textInput2: ["textInput2"],
  rectangle2: ["rectangle2"],
  image12: ["image12"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone11ProMax2: makeNodeComponent("iPhone11ProMax2"),
    rectangle3: makeNodeComponent("rectangle3"),
    rectangle1: makeNodeComponent("rectangle1"),
    group1: makeNodeComponent("group1"),
    textInput: makeNodeComponent("textInput"),
    group2: makeNodeComponent("group2"),
    textInput2: makeNodeComponent("textInput2"),
    rectangle2: makeNodeComponent("rectangle2"),
    image12: makeNodeComponent("image12"),
    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
