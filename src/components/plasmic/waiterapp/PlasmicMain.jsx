// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 54gWnNeJTpdtwf46XhFcJL
// Component: rGCFMq0jZ2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { useScreenVariants as useScreenVariantsvrTwc8W1T6YPe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vrTWC8W1T6yPe/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_waiterapp.module.css"; // plasmic-import: 54gWnNeJTpdtwf46XhFcJL/projectcss
import sty from "./PlasmicMain.module.css"; // plasmic-import: rGCFMq0jZ2/css
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: PhMoz6uI8D/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: 4-q3UhdZw7/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: bWo-X4N7VH/icon
import IcsharpHistoryIcon from "./icons/PlasmicIcon__IcsharpHistory"; // plasmic-import: fE8D1MgEed/icon
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: lp-UXOTPTr/icon

export const PlasmicMain__VariantProps = new Array();

export const PlasmicMain__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicMain__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvrTwc8W1T6YPe()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone11ProMax3"}
            data-plasmic-override={overrides.iPhone11ProMax3}
            className={classNames(projectcss.all, sty.iPhone11ProMax3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gzEej
              )}
            >
              {"Tables"}
            </div>
            <VectorIcon
              className={classNames(projectcss.all, sty.svg__f5FCc)}
              role={"img"}
            />

            <div
              data-plasmic-name={"rectangle7"}
              data-plasmic-override={overrides.rectangle7}
              className={classNames(projectcss.all, sty.rectangle7)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f8M0E
              )}
            >
              {"Search"}
            </div>
            <Vector2Icon
              className={classNames(projectcss.all, sty.svg__iBd89)}
              role={"img"}
            />

            {true ? (
              <div
                data-plasmic-name={"group5"}
                data-plasmic-override={overrides.group5}
                className={classNames(projectcss.all, sty.group5)}
              >
                <div
                  data-plasmic-name={"rectangle8"}
                  data-plasmic-override={overrides.rectangle8}
                  className={classNames(projectcss.all, sty.rectangle8)}
                />

                <div
                  data-plasmic-name={"maskGroup2"}
                  data-plasmic-override={overrides.maskGroup2}
                  className={classNames(projectcss.all, sty.maskGroup2)}
                />

                <div
                  data-plasmic-name={"image4"}
                  data-plasmic-override={overrides.image4}
                  className={classNames(projectcss.all, sty.image4)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g8Sff
                  )}
                >
                  {"Table 2"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q6J7I
                  )}
                >
                  {"Status: Bad"}
                </div>
              </div>
            ) : null}
            <div
              data-plasmic-name={"rectangle1"}
              data-plasmic-override={overrides.rectangle1}
              className={classNames(projectcss.all, sty.rectangle1)}
            />

            <div
              data-plasmic-name={"heroiconsSolidhome"}
              data-plasmic-override={overrides.heroiconsSolidhome}
              className={classNames(projectcss.all, sty.heroiconsSolidhome)}
            >
              <GroupIcon
                className={classNames(projectcss.all, sty.svg__fiRr)}
                role={"img"}
              />
            </div>
            <IcsharpHistoryIcon
              className={classNames(projectcss.all, sty.svg__qAa4)}
              role={"img"}
            />

            <UserIcon
              className={classNames(projectcss.all, sty.svg__kuJ2F)}
              role={"img"}
            />

            <div
              data-plasmic-name={"figmaPaste"}
              data-plasmic-override={overrides.figmaPaste}
              className={classNames(projectcss.all, sty.figmaPaste)}
            />

            <button
              data-plasmic-name={"rectangle5"}
              data-plasmic-override={overrides.rectangle5}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.rectangle5
              )}
              disabled={false}
              onClick={async event => {
                const $steps = {};
                $steps["goToStatus"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "nQknfohyC",
                            componentUuid: "rGCFMq0jZ2",
                            argName: "destination"
                          },
                          () => `/new-page-2`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "nQknfohyC",
                          componentUuid: "rGCFMq0jZ2"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToStatus"] === "object" &&
                  typeof $steps["goToStatus"].then === "function"
                ) {
                  $steps["goToStatus"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "nQknfohyC",
                      componentUuid: "rGCFMq0jZ2"
                    },
                    $steps["goToStatus"]
                  );
                }
              }}
              ref={ref => {
                $refs["rectangle5"] = ref;
              }}
              value={"hello"}
            >
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zod8W
                  )}
                >
                  {"Open"}
                </div>
              ) : null}
            </button>
            {true ? (
              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                arrows={false}
                centerMode={true}
                centerPadding={"75"}
                className={classNames("__wab_instance", sty.slider)}
              >
                {true ? (
                  <div
                    data-plasmic-name={"table1"}
                    data-plasmic-override={overrides.table1}
                    className={classNames(projectcss.all, sty.table1)}
                  >
                    <div
                      data-plasmic-name={"rectangle10"}
                      data-plasmic-override={overrides.rectangle10}
                      className={classNames(projectcss.all, sty.rectangle10)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6BnXn
                        )}
                      >
                        {"Table 1"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"image6"}
                      data-plasmic-override={overrides.image6}
                      className={classNames(projectcss.all, sty.image6)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__br1Qm
                      )}
                    >
                      {"Status: Good"}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"table2"}
                    data-plasmic-override={overrides.table2}
                    className={classNames(projectcss.all, sty.table2)}
                  >
                    <div
                      data-plasmic-name={"rectangle11"}
                      data-plasmic-override={overrides.rectangle11}
                      className={classNames(projectcss.all, sty.rectangle11)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dBft
                        )}
                      >
                        {"Table 2"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"image7"}
                      data-plasmic-override={overrides.image7}
                      className={classNames(projectcss.all, sty.image7)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___74USa
                      )}
                    >
                      {"Status: Bad"}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"table3"}
                    data-plasmic-override={overrides.table3}
                    className={classNames(projectcss.all, sty.table3)}
                  >
                    <div
                      data-plasmic-name={"rectangle12"}
                      data-plasmic-override={overrides.rectangle12}
                      className={classNames(projectcss.all, sty.rectangle12)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v67Lu
                        )}
                      >
                        {"Table 3\n"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"image8"}
                      data-plasmic-override={overrides.image8}
                      className={classNames(projectcss.all, sty.image8)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ejSTh
                      )}
                    >
                      {"Status: Bad"}
                    </div>
                  </div>
                ) : null}
              </Slider>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone11ProMax3",
    "rectangle7",
    "group5",
    "rectangle8",
    "maskGroup2",
    "image4",
    "rectangle1",
    "heroiconsSolidhome",
    "figmaPaste",
    "rectangle5",
    "slider",
    "table1",
    "rectangle10",
    "image6",
    "table2",
    "rectangle11",
    "image7",
    "table3",
    "rectangle12",
    "image8"
  ],

  iPhone11ProMax3: [
    "iPhone11ProMax3",
    "rectangle7",
    "group5",
    "rectangle8",
    "maskGroup2",
    "image4",
    "rectangle1",
    "heroiconsSolidhome",
    "figmaPaste",
    "rectangle5",
    "slider",
    "table1",
    "rectangle10",
    "image6",
    "table2",
    "rectangle11",
    "image7",
    "table3",
    "rectangle12",
    "image8"
  ],

  rectangle7: ["rectangle7"],
  group5: ["group5", "rectangle8", "maskGroup2", "image4"],
  rectangle8: ["rectangle8"],
  maskGroup2: ["maskGroup2"],
  image4: ["image4"],
  rectangle1: ["rectangle1"],
  heroiconsSolidhome: ["heroiconsSolidhome"],
  figmaPaste: ["figmaPaste"],
  rectangle5: ["rectangle5"],
  slider: [
    "slider",
    "table1",
    "rectangle10",
    "image6",
    "table2",
    "rectangle11",
    "image7",
    "table3",
    "rectangle12",
    "image8"
  ],

  table1: ["table1", "rectangle10", "image6"],
  rectangle10: ["rectangle10"],
  image6: ["image6"],
  table2: ["table2", "rectangle11", "image7"],
  rectangle11: ["rectangle11"],
  image7: ["image7"],
  table3: ["table3", "rectangle12", "image8"],
  rectangle12: ["rectangle12"],
  image8: ["image8"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMain__ArgProps,
          internalVariantPropNames: PlasmicMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain";
  } else {
    func.displayName = `PlasmicMain.${nodeName}`;
  }
  return func;
}

export const PlasmicMain = Object.assign(
  // Top-level PlasmicMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone11ProMax3: makeNodeComponent("iPhone11ProMax3"),
    rectangle7: makeNodeComponent("rectangle7"),
    group5: makeNodeComponent("group5"),
    rectangle8: makeNodeComponent("rectangle8"),
    maskGroup2: makeNodeComponent("maskGroup2"),
    image4: makeNodeComponent("image4"),
    rectangle1: makeNodeComponent("rectangle1"),
    heroiconsSolidhome: makeNodeComponent("heroiconsSolidhome"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    rectangle5: makeNodeComponent("rectangle5"),
    slider: makeNodeComponent("slider"),
    table1: makeNodeComponent("table1"),
    rectangle10: makeNodeComponent("rectangle10"),
    image6: makeNodeComponent("image6"),
    table2: makeNodeComponent("table2"),
    rectangle11: makeNodeComponent("rectangle11"),
    image7: makeNodeComponent("image7"),
    table3: makeNodeComponent("table3"),
    rectangle12: makeNodeComponent("rectangle12"),
    image8: makeNodeComponent("image8"),
    // Metadata about props expected for PlasmicMain
    internalVariantProps: PlasmicMain__VariantProps,
    internalArgProps: PlasmicMain__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMain;
/* prettier-ignore-end */
